{"version":3,"sources":["Components/Firebase/Context.js","Components/Firebase/Firebase.js","Components/Firebase/index.js","constants/routes.js","constants/roles.js","Components/SignUp/SignUp.js","Components/Logo/Logo.js","Components/Landing/Landing.js","Components/PasswordForget/PassworgForget.js","Components/SignIn/SignIn.js","Components/Session/Context.js","Components/Session/withAuthentication.js","Components/Session/withAuthorization.js","Components/Home/Home.js","Components/PasswordChange/PasswordChange.js","Components/Account/Account.js","Components/Admin/Admin.js","Components/Demo/Demo.js","Components/SignOut/SignOut.js","Components/Navigation/Navigation.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["FirebaseContext","React","createContext","withFirebase","Component","props","Consumer","firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Firebase","doCreateUserWithEmailAndPassword","email","password","auth","createUserWithEmailAndPassword","doSignInWithEmailAndPassword","signInWithEmailAndPassword","doSignOut","signOut","doPasswordReset","sendPasswordResetEmail","doPasswordUpdate","currentUser","updatePassword","onAuthUserListener","next","fallback","onAuthStateChanged","authUser","user","uid","once","then","snapshot","dbUser","val","roles","db","ref","users","app","initializeApp","this","database","HOME","ADMIN","INITIAL_STATE","username","passwordOne","passwordTwo","isAdmin","error","SignUpFormBase","onSubmit","event","state","ROLES","set","setState","history","push","ROUTES","catch","preventDefault","onChange","target","name","value","onChangeCheckbox","checked","isInvalid","className","type","placeholder","disabled","message","SignUpForm","compose","withRouter","SignUpLink","to","SignUpPage","LogoIcon","icon","faWallet","LogoCopy","Logo","exact","LandingPage","SignUp","PasswordForgetFormBase","PasswordForgetLink","PasswordForgetPage","PasswordForgetForm","SignInFormBase","SignInForm","SignInPage","AuthUserContext","withAuthentication","WithAuthentication","listener","Provider","withAuthorization","condition","WithAuthorization","PasswordChangeForm","PasswordChange","AdminPage","loading","on","usersObject","usersList","Object","keys","map","key","off","UserList","Demo","onClick","NavigationAuth","activeClassName","SignOut","NavigationNonAuth","Navigation","path","component","HomePage","AccountPage","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iSAEMA,EAAkBC,IAAMC,cAAc,MAG/BC,EAAe,SAAAC,GAAS,OAAI,SAAAC,GAAK,OAC1C,kBAACL,EAAgBM,SAAjB,KACK,SAAAC,GAAQ,OAAI,kBAACH,EAAD,iBAAeC,EAAf,CAAsBE,SAAUA,SAItCP,I,yPCPf,IAAMQ,EAAS,CACXC,OAAQ,0CACRC,WAAY,oCACZC,YAAa,2CACbC,UAAW,oBACXC,cAAe,GACfC,kBAAmB,gBACnBC,MAAO,wCCRIC,EDYX,aAAe,IAAD,gCAMdC,iCAAmC,SAACC,EAAOC,GAAR,OAC/B,EAAKC,KAAKC,+BAA+BH,EAAOC,IAPtC,KASdG,6BAA+B,SAACJ,EAAOC,GAAR,OAC3B,EAAKC,KAAKG,2BAA2BL,EAAOC,IAVlC,KAYdK,UAAY,kBAAM,EAAKJ,KAAKK,WAZd,KAcdC,gBAAkB,SAAAR,GAAK,OAAI,EAAKE,KAAKO,uBAAuBT,IAd9C,KAgBdU,iBAAmB,SAAAT,GAAQ,OACvB,EAAKC,KAAKS,YAAYC,eAAeX,IAjB3B,KAoBdY,mBAAqB,SAACC,EAAMC,GAAP,OACjB,EAAKb,KAAKc,mBAAmB,SAAAC,GACrBA,EACA,EAAKC,KAAKD,EAASE,KACdC,KAAK,SACLC,KAAK,SAAAC,GACF,IAAMC,EAASD,EAASE,MAEnBD,EAAOE,QACRF,EAAOE,MAAQ,IAGnBR,E,qVAAQ,EACJE,IAAKF,EAASE,IACdnB,MAAOiB,EAASjB,OACbuB,GAEPT,EAAKG,KAGbF,OAxCE,KA6CdG,KAAO,SAAAC,GAAG,OAAI,EAAKO,GAAGC,IAAR,gBAAqBR,KA7CrB,KA+CdS,MAAQ,kBAAM,EAAKF,GAAGC,IAAI,UA9CtBE,IAAIC,cAAcxC,GAClByC,KAAK7B,KAAO2B,IAAI3B,OAChB6B,KAAKL,GAAKG,IAAIG,YEfTC,EAAO,QCHPC,EAAQ,Q,mjBCQrB,IAOMC,EAAgB,CAClBC,SAAU,GACVpC,MAAO,GACPqC,YAAa,GACbC,YAAa,GACbC,SAAS,EACTC,MAAO,MAILC,E,YAEF,WAAYtD,GAAQ,IAAD,8BACf,4CAAMA,KAIVuD,SAAW,SAAAC,GAAU,IAAD,EAEkC,EAAKC,MAA/CR,EAFQ,EAERA,SAAUpC,EAFF,EAEEA,MAAOqC,EAFT,EAESA,YAAaE,EAFtB,EAEsBA,QAChCd,EAAQ,GACVc,IACAd,EAAMoB,GAAeA,GAGzB,EAAK1D,MAAME,SACNU,iCAAiCC,EAAOqC,GACxChB,KAAK,SAAAJ,GAEF,OAAO,EAAK9B,MAAME,SACb6B,KAAKD,EAASC,KAAKC,KACnB2B,IAAI,CACDV,WACApC,QACAyB,YAGXJ,KAAK,SAAAJ,GACF,EAAK8B,SAAL,KAAmBZ,IACnB,EAAKhD,MAAM6D,QAAQC,KAAKC,KAE3BC,MAAM,SAAAX,GACH,EAAKO,SAAS,CAAEP,YAExBG,EAAMS,kBAhCS,EAmCnBC,SAAW,SAAAV,GACP,EAAKI,SAAL,eAAiBJ,EAAMW,OAAOC,KAAOZ,EAAMW,OAAOE,SApCnC,EAuCnBC,iBAAmB,SAAAd,GACf,EAAKI,SAAL,eAAiBJ,EAAMW,OAAOC,KAAOZ,EAAMW,OAAOI,WAtClD,EAAKd,MAAL,KAAkBT,GAFH,E,sEA2CT,IAAD,EASDJ,KAAKa,MANLR,EAHC,EAGDA,SACApC,EAJC,EAIDA,MACAqC,EALC,EAKDA,YACAC,EANC,EAMDA,YAEAE,EARC,EAQDA,MAGEmB,EACFtB,IAAgBC,GACA,KAAhBD,GACU,KAAVrC,GACa,KAAboC,EAEJ,OACI,0BAAMM,SAAUX,KAAKW,SAAUkB,UAAU,aACrC,2BACIL,KAAK,WACLC,MAAOpB,EACPiB,SAAUtB,KAAKsB,SACfQ,KAAK,OACLC,YAAY,cAEhB,2BACIP,KAAK,QACLC,MAAOxD,EACPqD,SAAUtB,KAAKsB,SACfQ,KAAK,OACLC,YAAY,kBAEhB,2BACIP,KAAK,cACLC,MAAOnB,EACPgB,SAAUtB,KAAKsB,SACfQ,KAAK,WACLC,YAAY,aAEhB,2BACIP,KAAK,cACLC,MAAOlB,EACPe,SAAUtB,KAAKsB,SACfQ,KAAK,WACLC,YAAY,qBAiBhB,4BAAQC,SAAUJ,EAAWE,KAAK,UAAlC,eACCrB,GAAS,2BAAIA,EAAMwB,c,GA5GP9E,aAmHvB+E,EAAaC,YACfC,IACAlF,EAFeiF,CAGjBzB,GAEI2B,EAAa,kBACf,uBAAGR,UAAU,aAAb,qCACsC,kBAAC,IAAD,CAAMS,GFlJzB,WEkJmB,iBAG3BC,EA9II,kBACf,yBAAKV,UAAU,wBACX,2CACA,kBAACK,EAAD,Q,gBCJFM,E,iLAEE,OAAO,kBAAC,IAAD,CAAiBC,KAAMC,IAAUb,UAAU,mB,GAFnC1E,aAqBjBwF,EAAW,kBACb,yBAAKd,UAAU,YACX,kBAAC,EAAD,MACA,yBAAKA,UAAU,uBACX,uBAAGA,UAAU,4BAAb,UACA,uBAAGA,UAAU,cAAb,kBAKGe,EAxBF,WACT,OACI,kBAAC,IAAD,CAAMC,OAAK,EAACP,GHhBG,KGiBX,yBAAKT,UAAU,QACX,kBAAC,EAAD,MACA,yBAAKA,UAAU,uBACX,uBAAGA,UAAU,cAAb,UACA,uBAAGA,UAAU,4BAAb,mBCCLiB,E,iLAhBP,OACI,yBAAKjB,UAAU,OACX,yBAAKA,UAAU,SACX,kBAAC,EAAD,MACA,kEACA,+DAEJ,yBAAKA,UAAU,SACX,4DACA,kBAACkB,EAAD,Y,GAXM5F,a,mjBCC1B,IAOMiD,EAAgB,CAClBnC,MAAO,GACPwC,MAAO,MAGLuC,E,YAEF,WAAY5F,GAAQ,IAAD,8BACf,4CAAMA,KAIVuD,SAAW,SAAAC,GAAU,IACT3C,EAAU,EAAK4C,MAAf5C,MACR,EAAKb,MAAME,SACNmB,gBAAgBR,GAChBqB,KAAK,WACF,EAAK0B,SAAL,KAAmBZ,MAEtBgB,MAAM,SAAAX,GACH,EAAKO,SAAS,CAAEP,YAExBG,EAAMS,kBAfS,EAkBnBC,SAAW,SAAAV,GACP,EAAKI,SAAL,eAAiBJ,EAAMW,OAAOC,KAAOZ,EAAMW,OAAOE,SAjBlD,EAAKZ,MAAL,KAAkBT,GAFH,E,sEAsBT,IAAD,EACoBJ,KAAKa,MAAtB5C,EADH,EACGA,MAAOwC,EADV,EACUA,MACTmB,EAAsB,KAAV3D,EAClB,OACI,0BAAM0C,SAAUX,KAAKW,SAAUkB,UAAU,aACrC,2BACIL,KAAK,QACLC,MAAOzB,KAAKa,MAAM5C,MAClBqD,SAAUtB,KAAKsB,SACfQ,KAAK,OACLC,YAAY,kBAEhB,4BAAQC,SAAUJ,EAAWE,KAAK,UAAlC,yBAGCrB,GAAS,2BAAIA,EAAMwB,c,GAvCC9E,aA6C/B8F,EAAqB,kBACvB,uBAAGpB,UAAU,aACT,kBAAC,IAAD,CAAMS,GL1DiB,cK0DvB,uCAIOY,EA/DY,kBACvB,yBAAKrB,UAAU,wBACX,qDACA,kBAACsB,EAAD,QA8DFA,EAAqBjG,EAAa8F,G,mjBC9DxC,IASM5C,EAAgB,CAClBnC,MAAO,GACPC,SAAU,GACVuC,MAAO,MAGL2C,E,YAEF,WAAYhG,GAAQ,IAAD,8BACf,4CAAMA,KAIVuD,SAAW,SAAAC,GAAU,IAAD,EACY,EAAKC,MAAzB5C,EADQ,EACRA,MAAOC,EADC,EACDA,SACf,EAAKd,MAAME,SACNe,6BAA6BJ,EAAOC,GACpCoB,KAAK,WACF,EAAK0B,SAAL,KAAmBZ,IACnB,EAAKhD,MAAM6D,QAAQC,KAAKC,KAE3BC,MAAM,SAAAX,GACH,EAAKO,SAAS,CAAEP,YAExBG,EAAMS,kBAhBS,EAmBnBC,SAAW,SAAAV,GACP,EAAKI,SAAL,eAAiBJ,EAAMW,OAAOC,KAAOZ,EAAMW,OAAOE,SAlBlD,EAAKZ,MAAL,KAAkBT,GAFH,E,sEAuBT,IAAD,EAC8BJ,KAAKa,MAAhC5C,EADH,EACGA,MAAOC,EADV,EACUA,SAAUuC,EADpB,EACoBA,MACnBmB,EAAyB,KAAb1D,GAA6B,KAAVD,EACrC,OACI,0BAAM0C,SAAUX,KAAKW,SAAUkB,UAAU,aACrC,2BACIL,KAAK,QACLC,MAAOxD,EACPqD,SAAUtB,KAAKsB,SACfQ,KAAK,OACLC,YAAY,kBAEhB,2BACIP,KAAK,WACLC,MAAOvD,EACPoD,SAAUtB,KAAKsB,SACfQ,KAAK,WACLC,YAAY,aAEhB,4BAAQC,SAAUJ,EAAWE,KAAK,UAAlC,WAGCrB,GAAS,2BAAIA,EAAMwB,c,GA/CP9E,aAqDvBkG,EAAalB,YACfC,IACAlF,EAFeiF,CAGjBiB,GAEaE,EAzEI,kBACf,yBAAKzB,UAAU,wBACX,+CACA,kBAACwB,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCTOE,EAFSvG,IAAMC,cAAc,MCwC7BuG,EAtCY,SAAArG,GAAc,IAE/BsG,EAF8B,YAIhC,WAAYrG,GAAQ,IAAD,8BACf,4CAAMA,KACDyD,MAAQ,CACT3B,SAAU,MAHC,EAJa,iFAWX,IAAD,OAChBc,KAAK0D,SAAW1D,KAAK5C,MAAME,SAASwB,mBAChC,SAAAI,GACI,EAAK8B,SAAS,CAAE9B,cAEpB,WACI,EAAK8B,SAAS,CAAE9B,SAAU,WAjBN,6CAuB5Bc,KAAK0D,aAvBuB,+BA2B5B,OACI,kBAAC,EAAgBC,SAAjB,CAA0BlC,MAAOzB,KAAKa,MAAM3B,UACxC,kBAAC/B,EAAc6C,KAAK5C,YA7BA,GAEHJ,IAAMG,WAiCvC,OAAOD,EAAauG,ICITG,GApCW,SAAAC,GAAS,OAAI,SAAA1G,GAAc,IAE3C2G,EAF0C,4LAIvB,IAAD,OAChB9D,KAAK0D,SAAW1D,KAAK5C,MAAME,SAASwB,mBAChC,SAAAI,GACS2E,EAAU3E,IACX,EAAK9B,MAAM6D,QAAQC,KTbpB,YSgBP,kBAAM,EAAK9D,MAAM6D,QAAQC,KThBlB,eSK6B,6CAgBxClB,KAAK0D,aAhBmC,+BAmBlC,IAAD,OACL,OACI,kBAAC,EAAgBrG,SAAjB,KACK,SAAA6B,GAAQ,OACL2E,EAAU3E,GAAY,kBAAC/B,EAAc,EAAKC,OAAY,WAvB1B,GAEhBJ,IAAMG,WA4BtC,OAAOgF,YACHC,IACAlF,EAFGiF,CAGL2B,KC5BSF,MAFG,SAAA1E,GAAQ,QAAMA,GAEjB0E,CATE,kBACb,6BACI,yCACA,sF,ujBCHR,IAAMxD,GAAgB,CAClBE,YAAa,GACbC,YAAa,GACbE,MAAO,MAGLsD,G,YACF,WAAY3G,GAAQ,IAAD,8BACf,4CAAMA,KAGVuD,SAAW,SAAAC,GAAU,IACTN,EAAgB,EAAKO,MAArBP,YACR,EAAKlD,MAAME,SACNqB,iBAAiB2B,GACjBhB,KAAK,WACF,EAAK0B,SAAL,MAAmBZ,OAEtBgB,MAAM,SAAAX,GACH,EAAKO,SAAS,CAAEP,YAExBG,EAAMS,kBAdS,EAgBnBC,SAAW,SAAAV,GACP,EAAKI,SAAL,eAAiBJ,EAAMW,OAAOC,KAAOZ,EAAMW,OAAOE,SAflD,EAAKZ,MAAL,MAAkBT,IAFH,E,sEAmBT,IAAD,EACuCJ,KAAKa,MAAzCP,EADH,EACGA,YAAaC,EADhB,EACgBA,YAAaE,EAD7B,EAC6BA,MAC5BmB,EACFtB,IAAgBC,GAA+B,KAAhBD,EACnC,OACQ,0BAAMK,SAAUX,KAAKW,SAAUkB,UAAU,aACrC,2BACIL,KAAK,cACLC,MAAOnB,EACPgB,SAAUtB,KAAKsB,SACfQ,KAAK,WACLC,YAAY,iBAEhB,2BACIP,KAAK,cACLC,MAAOlB,EACPe,SAAUtB,KAAKsB,SACfQ,KAAK,WACLC,YAAY,yBAEhB,4BAAQC,SAAUJ,EAAWE,KAAK,UAAlC,yBAGCrB,GAAS,2BAAIA,EAAMwB,c,GA3CP9E,aAiDlBD,KAAa6G,IC9BbH,MAFG,SAAA1E,GAAQ,QAAMA,GAEjB0E,CAtBK,kBAChB,kBAAC,EAAgBvG,SAAjB,KACK,SAAA6B,GAAQ,OACL,yBAAK2C,UAAU,OACX,yBAAKA,UAAU,SACX,wCAAc3C,EAASjB,QAE3B,yBAAK4D,UAAU,SACX,yBAAKA,UAAU,wBACX,kBAACsB,EAAD,OAEJ,yBAAKtB,UAAU,wBACX,kBAACmC,GAAD,a,iOCXlBC,G,YAEF,WAAY7G,GAAQ,IAAD,8BACf,4CAAMA,KACDyD,MAAQ,CACTqD,SAAS,EACTrE,MAAO,IAJI,E,iFAQE,IAAD,OAChBG,KAAKgB,SAAS,CAAEkD,SAAS,IACzBlE,KAAK5C,MAAME,SAASuC,QAAQsE,GAAG,QAAS,SAAA5E,GAEpC,IAAM6E,EAAc7E,EAASE,MAEvB4E,EAAYC,OAAOC,KAAKH,GAAaI,IAAI,SAAAC,GAAG,O,uVAAA,IAC3CL,EAAYK,GAD+B,CAE9CrF,IAAKqF,MAGT,EAAKzD,SAAS,CACVnB,MAAOwE,EACPH,SAAS,Q,6CAMjBlE,KAAK5C,MAAME,SAASuC,QAAQ6E,Q,+BAGtB,IAAD,EAEsB1E,KAAKa,MAAxBhB,EAFH,EAEGA,MAAOqE,EAFV,EAEUA,QAEf,OACI,6BACI,qCACA,0FACCA,GAAW,4CACZ,kBAAC,GAAD,CAAUrE,MAAOA,S,GAzCT1C,aA+ClBwH,GAAW,SAAC,GAAD,IAAG9E,EAAH,EAAGA,MAAH,OACb,4BACKA,EAAM2E,IAAI,SAAArF,GAAI,OACX,wBAAIsF,IAAKtF,EAAKC,KAClB,8BACE,uCADF,IACwBD,EAAKC,KAErB,8BACN,2CADM,IACoBD,EAAKlB,OAEzB,8BACN,6CADM,IACsBkB,EAAKkB,eAU5B8B,eACXyB,GAJc,SAAA1E,GAAQ,OACtBA,KAAcA,EAASQ,MAAMoB,KAI7B5D,EAFWiF,CAGb8B,ICpEaW,G,iLANP,OACI,sG,GAHOzH,aCOJD,KANO,SAAC,GAAD,IAAGI,EAAH,EAAGA,SAAH,OAClB,4BAAQwE,KAAK,SAAS+C,QAASvH,EAASiB,UAAWsD,UAAU,WAA7D,cCaEiD,GAAiB,SAAC,GAAD,IAAG5F,EAAH,EAAGA,SAAH,OACnB,wBAAI2C,UAAU,QACV,wBAAIA,UAAU,iBACV,kBAAC,IAAD,CAASS,GAAInB,EAAaU,UAAU,UAAUkD,gBAAgB,UAA9D,SAEJ,wBAAIlD,UAAU,iBACV,kBAAC,IAAD,CAASS,GhBnBE,WgBmBkBT,UAAU,UAAUkD,gBAAgB,UAAjE,aAED7F,EAASQ,MAAMoB,IACd,wBAAIe,UAAU,iBACV,kBAAC,IAAD,CAASS,GhBtBJ,SgBsBsBT,UAAU,UAAUkD,gBAAgB,UAA/D,UAGR,wBAAIlD,UAAU,iBACV,kBAACmD,GAAD,SAKNC,GAAoB,kBACtB,wBAAIpD,UAAU,QACV,wBAAIA,UAAU,iBACV,kBAAC,IAAD,CAASS,GhBhCD,QgBgCkBT,UAAU,UAAUkD,gBAAgB,UAA9D,SAEJ,wBAAIlD,UAAU,iBACV,kBAAC,IAAD,CAASS,GhBxCE,UgBwCkBT,UAAU,UAAUkD,gBAAgB,UAAjE,cAMGG,GAvCI,kBACf,6BACI,kBAAC,EAAgB7H,SAAjB,KACK,SAAA6B,GAAQ,OAAIA,EAAW,kBAAC,GAAD,CAAgBA,SAAUA,IAAc,kBAAC,GAAD,UC6B7DsE,KAvBH,kBAER,kBAAC,IAAD,KACI,gCACI,kBAAC,EAAD,MACA,kBAAC,GAAD,OAEJ,yBAAK3B,UAAU,iBACX,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOgB,OAAK,EAACsC,KjB3BN,IiB2B4BC,UAAWtC,IAC9C,kBAAC,IAAD,CAAOqC,KjB3BA,UiB2BsBC,UAAW7C,IACxC,kBAAC,IAAD,CAAO4C,KjB3BA,UiB2BsBC,UAAW9B,IACxC,kBAAC,IAAD,CAAO6B,KjBxBQ,aiBwBsBC,UAAWlC,IAChD,kBAAC,IAAD,CAAOiC,KAAMhE,EAAaiE,UAAWC,KACrC,kBAAC,IAAD,CAAOF,KjB5BA,WiB4BsBC,UAAWE,KACxC,kBAAC,IAAD,CAAOH,KjB5BF,SiB4BsBC,UAAWnB,KACtC,kBAAC,IAAD,CAAOkB,KjB3BH,QiB2BsBC,UAAWR,UCtBjCW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACL,kBAAC,EAAgBlC,SAAjB,CAA0BlC,MAAO,IAAI1D,GACjC,kBAAC,GAAD,OAEJ+H,SAASC,eAAe,SDsHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5G,KAAK,SAAA6G,GACjCA,EAAaC,iB","file":"static/js/main.d34e6a5f.chunk.js","sourcesContent":["import React from 'react';\n\nconst FirebaseContext = React.createContext(null);\n\n\nexport const withFirebase = Component => props => (\n    <FirebaseContext.Consumer>\n        {firebase => <Component {...props} firebase={firebase} />}\n    </FirebaseContext.Consumer>\n);\n\nexport default FirebaseContext;","import app from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/database';\n\nconst config = {\n    apiKey: \"AIzaSyDp4TO37P2aH_vPbwjRbDnWW3FsKpssFJw\",\n    authDomain: \"project-my-budget.firebaseapp.com\",\n    databaseURL: \"https://project-my-budget.firebaseio.com\",\n    projectId: \"project-my-budget\",\n    storageBucket: \"\",\n    messagingSenderId: \"1051899526663\",\n    appId: \"1:1051899526663:web:be7526a8f3b9d7e7\"\n};\n\nclass Firebase {\n    constructor() {\n        app.initializeApp(config);\n        this.auth = app.auth();\n        this.db = app.database();\n    }\n    // *** Auth API ***\n    doCreateUserWithEmailAndPassword = (email, password) =>\n        this.auth.createUserWithEmailAndPassword(email, password);\n\n    doSignInWithEmailAndPassword = (email, password) =>\n        this.auth.signInWithEmailAndPassword(email, password);\n\n    doSignOut = () => this.auth.signOut();\n\n    doPasswordReset = email => this.auth.sendPasswordResetEmail(email);\n\n    doPasswordUpdate = password =>\n        this.auth.currentUser.updatePassword(password);\n\n    // *** Merge Auth and DB User API *** //\n    onAuthUserListener = (next, fallback) =>\n        this.auth.onAuthStateChanged(authUser => {\n            if (authUser) {\n                this.user(authUser.uid)\n                    .once('value')\n                    .then(snapshot => {\n                        const dbUser = snapshot.val();\n                        // default empty roles\n                        if (!dbUser.roles) {\n                            dbUser.roles = {};\n                        }\n                        // merge auth and db user\n                        authUser = {\n                            uid: authUser.uid,\n                            email: authUser.email,\n                            ...dbUser,\n                        };\n                        next(authUser);\n                    });\n            } else {\n                fallback();\n            }\n        });\n\n    // *** User API ***\n    user = uid => this.db.ref(`users/${uid}`);\n\n    users = () => this.db.ref('users');\n\n}\n\n\nexport default Firebase;\n\n\n","import FirebaseContext, { withFirebase } from './Context';\nimport Firebase from './Firebase';\n\nexport default Firebase;\nexport { FirebaseContext, withFirebase };","export const LANDING = '/';\nexport const SIGN_UP = '/signup';\nexport const SIGN_IN = '/signin';\nexport const HOME = '/home';\nexport const ACCOUNT = '/account';\nexport const ADMIN = '/admin';\nexport const PASSWORD_FORGET = '/pw-forget';\nexport const DEMO = '/demo';","export const ADMIN = 'ADMIN';","import React, { Component } from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nimport { compose } from 'recompose';\nimport { withFirebase } from '../Firebase';\nimport * as ROUTES from '../../constants/routes';\nimport * as ROLES from '../../constants/roles';\n\n\nconst SignUpPage = () => (\n    <div className=\"signForms--container\">\n        <h1>zarejestruj</h1>\n        <SignUpForm />\n    </div>\n);\n\nconst INITIAL_STATE = {\n    username: '',\n    email: '',\n    passwordOne: '',\n    passwordTwo: '',\n    isAdmin: false,\n    error: null,\n};\n\n\nclass SignUpFormBase extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = { ...INITIAL_STATE };\n    }\n\n    onSubmit = event => {\n\n        const { username, email, passwordOne, isAdmin } = this.state;\n        const roles = {};\n        if (isAdmin) {\n            roles[ROLES.ADMIN] = ROLES.ADMIN;\n        }\n\n        this.props.firebase\n            .doCreateUserWithEmailAndPassword(email, passwordOne)\n            .then(authUser => {\n                // Create a user in your Firebase realtime database\n                return this.props.firebase\n                    .user(authUser.user.uid)\n                    .set({\n                        username,\n                        email,\n                        roles,\n                    });\n            })\n            .then(authUser => {\n                this.setState({ ...INITIAL_STATE });\n                this.props.history.push(ROUTES.HOME);\n            })\n            .catch(error => {\n                this.setState({ error });\n            });\n        event.preventDefault();\n    }\n\n    onChange = event => {\n        this.setState({ [event.target.name]: event.target.value });\n    };\n\n    onChangeCheckbox = event => {\n        this.setState({ [event.target.name]: event.target.checked });\n    };\n\n    render() {\n\n        const {\n            username,\n            email,\n            passwordOne,\n            passwordTwo,\n            // isAdmin,\n            error,\n        } = this.state;\n\n        const isInvalid =\n            passwordOne !== passwordTwo ||\n            passwordOne === '' ||\n            email === '' ||\n            username === '';\n\n        return (\n            <form onSubmit={this.onSubmit} className=\"signForms\">\n                <input\n                    name=\"username\"\n                    value={username}\n                    onChange={this.onChange}\n                    type=\"text\"\n                    placeholder=\"Full Name\"\n                />\n                <input\n                    name=\"email\"\n                    value={email}\n                    onChange={this.onChange}\n                    type=\"text\"\n                    placeholder=\"Email Address\"\n                />\n                <input\n                    name=\"passwordOne\"\n                    value={passwordOne}\n                    onChange={this.onChange}\n                    type=\"password\"\n                    placeholder=\"Password\"\n                />\n                <input\n                    name=\"passwordTwo\"\n                    value={passwordTwo}\n                    onChange={this.onChange}\n                    type=\"password\"\n                    placeholder=\"Confirm Password\"\n                />\n\n\n                {/*Możliwość zarejestrowania się jako admin*/}\n\n                {/*<label>*/}\n                {/*    Admin:*/}\n                {/*    <input*/}\n                {/*        name=\"isAdmin\"*/}\n                {/*        type=\"checkbox\"*/}\n                {/*        checked={isAdmin}*/}\n                {/*        onChange={this.onChangeCheckbox}*/}\n                {/*    />*/}\n                {/*</label>*/}\n\n\n                <button disabled={isInvalid} type=\"submit\">zarejestruj</button>\n                {error && <p>{error.message}</p>}\n            </form>\n        );\n    }\n}\n\n\nconst SignUpForm = compose(\n    withRouter,\n    withFirebase,\n)(SignUpFormBase);\n\nconst SignUpLink = () => (\n    <p className=\"signLinks\">\n        Nie masz jeszcze swojego profilu? <Link to={ROUTES.SIGN_UP}>zarejestruj</Link>\n    </p>\n);\nexport default SignUpPage;\nexport { SignUpForm, SignUpLink };","import React, {Component} from 'react';\nimport { faWallet } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {Link} from 'react-router-dom';\nimport * as ROUTES from \"../../constants/routes\";\n\n\nclass LogoIcon extends Component {\n    render() {\n        return <FontAwesomeIcon icon={faWallet} className=\"logo--icon\"/>\n    }\n};\n\n\nconst Logo = () => {\n    return (\n        <Link exact to={ROUTES.LANDING}>\n            <div className=\"logo\">\n                <LogoIcon />\n                <div className=\"logo__textContainer\">\n                    <p className=\"logo--text\">mój</p>\n                    <p className=\"logo--text logo--text__b\">budżet</p>\n                </div>\n            </div>\n        </Link>\n    )\n};\n\nconst LogoCopy = () => (\n    <div className=\"logoCopy\">\n        <LogoIcon />\n        <div className=\"logo__textContainer\">\n            <p className=\"logo--text logo--text__m\">mój</p>\n            <p className=\"logo--text\">budżet</p>\n        </div>\n    </div>\n);\n\nexport default Logo;\nexport {LogoCopy};\n","import React, {Component} from 'react';\nimport SignUpPage from \"../SignUp/SignUp\";\nimport {LogoCopy} from \"../Logo/Logo\";\n\nclass LandingPage extends Component {\n    render() {\n        return (\n            <div className=\"row\">\n                <div className=\"col-8\">\n                    <LogoCopy/>\n                    <h1>pomocna aplikacja dla każdego</h1>\n                    <h2>trzymaj w szachu swoje finanse</h2>\n                </div>\n                <div className=\"col-4\">\n                    <p>załóż nowe konto</p>\n                    <SignUpPage/>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default LandingPage","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { withFirebase } from '../Firebase';\nimport * as ROUTES from '../../constants/routes';\n\nconst PasswordForgetPage = () => (\n    <div className=\"signForms--container\">\n        <h1>przypomnij hasło</h1>\n        <PasswordForgetForm />\n    </div>\n);\n\nconst INITIAL_STATE = {\n    email: '',\n    error: null,\n};\n\nclass PasswordForgetFormBase extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = { ...INITIAL_STATE };\n    }\n\n    onSubmit = event => {\n        const { email } = this.state;\n        this.props.firebase\n            .doPasswordReset(email)\n            .then(() => {\n                this.setState({ ...INITIAL_STATE });\n            })\n            .catch(error => {\n                this.setState({ error });\n            });\n        event.preventDefault();\n    };\n\n    onChange = event => {\n        this.setState({ [event.target.name]: event.target.value });\n    };\n\n    render() {\n        const { email, error } = this.state;\n        const isInvalid = email === '';\n        return (\n            <form onSubmit={this.onSubmit} className=\"signForms\">\n                <input\n                    name=\"email\"\n                    value={this.state.email}\n                    onChange={this.onChange}\n                    type=\"text\"\n                    placeholder=\"Email Address\"\n                />\n                <button disabled={isInvalid} type=\"submit\">\n                    przypomnij hasło\n                </button>\n                {error && <p>{error.message}</p>}\n            </form>\n        );\n    }\n}\n\nconst PasswordForgetLink = () => (\n    <p className=\"signLinks\">\n        <Link to={ROUTES.PASSWORD_FORGET}>zapomniałeś hasła?</Link>\n    </p>\n);\n\nexport default PasswordForgetPage;\n\nconst PasswordForgetForm = withFirebase(PasswordForgetFormBase);\n\nexport { PasswordForgetForm, PasswordForgetLink };","import React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { compose } from 'recompose';\nimport { SignUpLink } from '../SignUp/SignUp';\nimport { PasswordForgetLink } from '../PasswordForget/PassworgForget';\nimport { withFirebase } from '../Firebase';\nimport * as ROUTES from '../../constants/routes';\n\nconst SignInPage = () => (\n    <div className=\"signForms--container\">\n        <h1>panel logowania</h1>\n        <SignInForm />\n        <PasswordForgetLink />\n        <SignUpLink />\n    </div>\n);\n\nconst INITIAL_STATE = {\n    email: '',\n    password: '',\n    error: null,\n};\n\nclass SignInFormBase extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = { ...INITIAL_STATE };\n    }\n\n    onSubmit = event => {\n        const { email, password } = this.state;\n        this.props.firebase\n            .doSignInWithEmailAndPassword(email, password)\n            .then(() => {\n                this.setState({ ...INITIAL_STATE });\n                this.props.history.push(ROUTES.HOME);\n            })\n            .catch(error => {\n                this.setState({ error });\n            });\n        event.preventDefault();\n    };\n\n    onChange = event => {\n        this.setState({ [event.target.name]: event.target.value });\n    };\n\n    render() {\n        const { email, password, error } = this.state;\n        const isInvalid = password === '' || email === '';\n        return (\n            <form onSubmit={this.onSubmit} className=\"signForms\">\n                <input\n                    name=\"email\"\n                    value={email}\n                    onChange={this.onChange}\n                    type=\"text\"\n                    placeholder=\"Email Address\"\n                />\n                <input\n                    name=\"password\"\n                    value={password}\n                    onChange={this.onChange}\n                    type=\"password\"\n                    placeholder=\"Password\"\n                />\n                <button disabled={isInvalid} type=\"submit\">\n                    zaloguj\n                </button>\n                {error && <p>{error.message}</p>}\n            </form>\n        );\n    }\n}\n\nconst SignInForm = compose(\n    withRouter,\n    withFirebase,\n)(SignInFormBase);\n\nexport default SignInPage;\nexport { SignInForm };","import React from 'react';\n\nconst AuthUserContext = React.createContext(null);\n\nexport default AuthUserContext;","import React from 'react';\nimport AuthUserContext from './Context';\nimport { withFirebase } from '../Firebase';\n\nconst withAuthentication = Component => {\n\n    class WithAuthentication extends React.Component {\n\n        constructor(props) {\n            super(props);\n            this.state = {\n                authUser: null,\n            };\n        }\n\n        componentDidMount() {\n            this.listener = this.props.firebase.onAuthUserListener(\n                authUser => {\n                    this.setState({ authUser });\n                },\n                () => {\n                    this.setState({ authUser: null });\n                },\n            );\n        }\n\n        componentWillUnmount() {\n            this.listener();\n        }\n\n        render() {\n            return (\n                <AuthUserContext.Provider value={this.state.authUser}>\n                    <Component {...this.props} />\n                </AuthUserContext.Provider>\n            );\n        }\n    }\n\n    return withFirebase(WithAuthentication);\n};\n\nexport default withAuthentication;","import React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { compose } from 'recompose';\nimport { withFirebase } from '../Firebase';\nimport AuthUserContext from './Context';\nimport * as ROUTES from '../../constants/routes';\n\nconst withAuthorization = condition => Component => {\n\n    class WithAuthorization extends React.Component {\n\n        componentDidMount() {\n            this.listener = this.props.firebase.onAuthUserListener(\n                authUser => {\n                    if (!condition(authUser)) {\n                        this.props.history.push(ROUTES.SIGN_IN);\n                    }\n                },\n                () => this.props.history.push(ROUTES.SIGN_IN),\n            );\n        }\n\n        componentWillUnmount() {\n            this.listener();\n        }\n\n        render() {\n            return (\n                <AuthUserContext.Consumer>\n                    {authUser =>\n                        condition(authUser) ? <Component {...this.props} /> : null\n                    }\n                </AuthUserContext.Consumer>\n            );\n        }\n    }\n\n    return compose(\n        withRouter,\n        withFirebase,\n    )(WithAuthorization);\n};\n\nexport default withAuthorization;","import React from 'react';\nimport { withAuthorization } from '../Session/Session';\n\nconst HomePage = () => (\n    <div>\n        <h1>Home Page</h1>\n        <p>The Home Page is accessible by every signed in user.</p>\n    </div>\n);\n\nconst condition = authUser => !!authUser;\n\nexport default withAuthorization(condition)(HomePage);","import React, { Component } from 'react';\nimport { withFirebase } from '../Firebase';\n\nconst INITIAL_STATE = {\n    passwordOne: '',\n    passwordTwo: '',\n    error: null,\n};\n\nclass PasswordChangeForm extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { ...INITIAL_STATE };\n    }\n    onSubmit = event => {\n        const { passwordOne } = this.state;\n        this.props.firebase\n            .doPasswordUpdate(passwordOne)\n            .then(() => {\n                this.setState({ ...INITIAL_STATE });\n            })\n            .catch(error => {\n                this.setState({ error });\n            });\n        event.preventDefault();\n    };\n    onChange = event => {\n        this.setState({ [event.target.name]: event.target.value });\n    };\n    render() {\n        const { passwordOne, passwordTwo, error } = this.state;\n        const isInvalid =\n            passwordOne !== passwordTwo || passwordOne === '';\n        return (\n                <form onSubmit={this.onSubmit} className=\"signForms\">\n                    <input\n                        name=\"passwordOne\"\n                        value={passwordOne}\n                        onChange={this.onChange}\n                        type=\"password\"\n                        placeholder=\"New Password\"\n                    />\n                    <input\n                        name=\"passwordTwo\"\n                        value={passwordTwo}\n                        onChange={this.onChange}\n                        type=\"password\"\n                        placeholder=\"Confirm New Password\"\n                    />\n                    <button disabled={isInvalid} type=\"submit\">\n                        zmień hasło\n                    </button>\n                    {error && <p>{error.message}</p>}\n                </form>\n        );\n    }\n}\n\nexport default withFirebase(PasswordChangeForm);","import React from 'react';\nimport { PasswordForgetForm } from '../PasswordForget/PassworgForget';\nimport PasswordChangeForm from '../PasswordChange/PasswordChange';\nimport { AuthUserContext, withAuthorization } from '../Session/Session';\n\n\nconst AccountPage = () => (\n    <AuthUserContext.Consumer>\n        {authUser => (\n            <div className=\"row\">\n                <div className=\"col-6\">\n                    <h1>Account: {authUser.email}</h1>\n                </div>\n                <div className=\"col-6\">\n                    <div className=\"signForms--container\">\n                        <PasswordForgetForm />\n                    </div>\n                    <div className=\"signForms--container\">\n                        <PasswordChangeForm />\n                    </div>\n                </div>\n            </div>\n        )}\n    </AuthUserContext.Consumer>\n);\n\nconst condition = authUser => !!authUser;\n\nexport default withAuthorization(condition)(AccountPage);","import React, { Component } from 'react';\nimport { compose } from 'recompose';\n\nimport { withFirebase } from '../Firebase';\nimport { withAuthorization } from '../Session/Session';\nimport * as ROLES from '../../constants/roles';\n\nclass AdminPage extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            loading: false,\n            users: [],\n        };\n    }\n\n    componentDidMount() {\n        this.setState({ loading: true });\n        this.props.firebase.users().on('value', snapshot => {\n\n            const usersObject = snapshot.val();\n\n            const usersList = Object.keys(usersObject).map(key => ({\n                ...usersObject[key],\n                uid: key,\n            }));\n\n            this.setState({\n                users: usersList,\n                loading: false,\n            });\n        });\n    }\n\n    componentWillUnmount() {\n        this.props.firebase.users().off();\n    }\n\n    render() {\n\n        const { users, loading } = this.state;\n\n        return (\n            <div>\n                <h1>Admin</h1>\n                <p>The Admin Page is accessible by every signed in admin user.</p>\n                {loading && <div>Loading ...</div>}\n                <UserList users={users} />\n            </div>\n        );\n    }\n}\n\nconst UserList = ({ users }) => (\n    <ul>\n        {users.map(user => (\n            <li key={user.uid}>\n        <span>\n          <strong>ID:</strong> {user.uid}\n        </span>\n                <span>\n          <strong>E-Mail:</strong> {user.email}\n        </span>\n                <span>\n          <strong>Username:</strong> {user.username}\n        </span>\n            </li>\n        ))}\n    </ul>\n);\n\nconst condition = authUser =>\n    authUser && !!authUser.roles[ROLES.ADMIN]\n;\nexport default compose(\n    withAuthorization(condition),\n    withFirebase,\n)(AdminPage);","import React, {Component} from 'react';\n\nclass Demo extends Component {\n    render() {\n        return (\n            <p>Tu będzie demo aplikacji z przykładowymi danymi do zabawy</p>\n        )\n    }\n}\n\nexport default Demo","import React from 'react';\nimport { withFirebase } from '../Firebase';\n\nconst SignOutButton = ({ firebase }) => (\n    <button type=\"button\" onClick={firebase.doSignOut} className=\"NavLink\">\n        sign out\n    </button>\n);\n\nexport default withFirebase(SignOutButton);","import React from 'react';\nimport {NavLink } from 'react-router-dom';\nimport SignOutButton from '../SignOut/SignOut';\nimport * as ROUTES from '../../constants/routes';\nimport * as ROLES from '../../constants/roles';\nimport { AuthUserContext } from '../Session/Session';\n\n\n\nconst Navigation = () => (\n    <div>\n        <AuthUserContext.Consumer>\n            {authUser => authUser ? <NavigationAuth authUser={authUser}/> : <NavigationNonAuth />}\n        </AuthUserContext.Consumer>\n    </div>\n);\n\nconst NavigationAuth = ({ authUser }) => (\n    <ul className=\"menu\">\n        <li className=\"menu--element\">\n            <NavLink to={ROUTES.HOME} className=\"NavLink\" activeClassName=\"Active\">home</NavLink>\n        </li>\n        <li className=\"menu--element\">\n            <NavLink to={ROUTES.ACCOUNT} className=\"NavLink\" activeClassName=\"Active\">profil</NavLink>\n        </li>\n        {!!authUser.roles[ROLES.ADMIN] && (\n            <li className=\"menu--element\">\n                <NavLink to={ROUTES.ADMIN} className=\"NavLink\" activeClassName=\"Active\">admin</NavLink>\n            </li>\n        )}\n        <li className=\"menu--element\">\n            <SignOutButton />\n        </li>\n    </ul>\n);\n\nconst NavigationNonAuth = () => (\n    <ul className=\"menu\">\n        <li className=\"menu--element\">\n            <NavLink to={ROUTES.DEMO} className=\"NavLink\" activeClassName=\"Active\">demo</NavLink>\n        </li>\n        <li className=\"menu--element\">\n            <NavLink to={ROUTES.SIGN_IN} className=\"NavLink\" activeClassName=\"Active\">zaloguj</NavLink>\n        </li>\n    </ul>\n);\n\n\nexport default Navigation;","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\nimport LandingPage from '../Landing/Landing';\nimport SignUpPage from '../SignUp/SignUp';\nimport SignInPage from '../SignIn/SignIn';\nimport PasswordForgetPage from '../PasswordForget/PassworgForget';\nimport HomePage from '../Home/Home';\nimport AccountPage from '../Account/Account';\nimport AdminPage from '../Admin/Admin';\nimport Demo from \"../Demo/Demo\";\nimport Logo from \"../Logo/Logo\";\nimport Navigation from \"../Navigation/Navigation\";\n\nimport * as ROUTES from '../../constants/routes';\nimport { withAuthentication } from '../Session/Session';\n\n\nconst App = () => (\n\n    <Router>\n        <header>\n            <Logo/>\n            <Navigation />\n        </header>\n        <div className=\"mainContainer\">\n            <Switch>\n                <Route exact path={ROUTES.LANDING} component={LandingPage}/>\n                <Route path={ROUTES.SIGN_UP} component={SignUpPage}/>\n                <Route path={ROUTES.SIGN_IN} component={SignInPage}/>\n                <Route path={ROUTES.PASSWORD_FORGET} component={PasswordForgetPage}/>\n                <Route path={ROUTES.HOME} component={HomePage}/>\n                <Route path={ROUTES.ACCOUNT} component={AccountPage}/>\n                <Route path={ROUTES.ADMIN} component={AdminPage}/>\n                <Route path={ROUTES.DEMO} component={Demo}/>\n            </Switch>\n        </div>\n    </Router>\n);\n\n\nexport default withAuthentication(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './Styles/main.scss';\nimport App from './Components/App/App';\nimport * as serviceWorker from './serviceWorker';\nimport Firebase, { FirebaseContext } from './Components/Firebase';\n\nReactDOM.render(\n    <FirebaseContext.Provider value={new Firebase()}>\n        <App />\n    </FirebaseContext.Provider>,\n    document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}