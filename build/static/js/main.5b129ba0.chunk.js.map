{"version":3,"sources":["Components/Layouts/header/Logo.js","Components/Layouts/header/Menu.js","Components/Layouts/header/UserStatus.js","Components/Layouts/header/Navigation.js","Components/Layouts/header/Header.js","Components/Layouts/main_section/StartPage.js","Components/Layouts/main_section/AboutApp.js","Components/Layouts/MainTemplate.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["LogoIcon","icon","faWallet","className","Component","Logo","Menu","exact","to","activeClassName","UserStatus","Navigation","Header","StartPage","AboutApp","MainTemplate","path","component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iSAKMA,E,iLAEE,OAAO,kBAAC,IAAD,CAAiBC,KAAMC,IAAUC,UAAU,mB,GAFnCC,aAmBRC,EAZF,WACT,OACI,yBAAKF,UAAU,QACX,kBAAC,EAAD,MACA,yBAAKA,UAAU,uBACX,uBAAGA,UAAU,4BAAb,UACA,uBAAGA,UAAU,cAAb,kBCHDG,E,iLATP,OACI,wBAAIH,UAAU,QACV,wBAAIA,UAAU,iBAAgB,kBAAC,IAAD,CAASI,OAAK,EAACC,GAAG,IAAIL,UAAU,UAAUM,gBAAgB,UAA1D,UAC9B,wBAAIN,UAAU,iBAAgB,kBAAC,IAAD,CAASK,GAAG,aAAaL,UAAU,UAAUM,gBAAgB,UAA7D,qB,GAL3BL,aCQJM,E,iLARP,OACI,yBAAKP,UAAU,cACX,+C,GAJSC,aCaVO,E,iLATP,OACI,6BACI,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GALSP,aCWVQ,E,iLATP,OACI,gCACI,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GALKR,aCMNS,E,iLANP,OACI,0D,GAHYT,aCQTU,E,iLANP,OACI,6D,GAHWV,aCkBRW,E,iLAZP,OACI,kBAAC,IAAD,KACI,kBAAC,EAAD,MACA,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOR,OAAK,EAACS,KAAK,IAAIC,UAAWJ,IACjC,kBAAC,IAAD,CAAOG,KAAK,aAAaC,UAAWH,U,GAP7BV,aCKZc,MARf,WACE,OACI,oCACE,kBAAC,EAAD,QCMYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.5b129ba0.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport { faWallet } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\n\nclass LogoIcon extends Component {\n    render() {\n        return <FontAwesomeIcon icon={faWallet} className=\"logo--icon\"/>\n    }\n};\n\n\nconst Logo = () => {\n    return (\n        <div className=\"logo\">\n            <LogoIcon />\n            <div className=\"logo__textContainer\">\n                <p className=\"logo--text logo--text__m\">mój</p>\n                <p className=\"logo--text\">budżet</p>\n            </div>\n        </div>\n    )\n};\n\nexport default Logo","import React, {Component} from 'react';\nimport {NavLink} from 'react-router-dom';\n\n\nclass Menu extends Component {\n    render() {\n        return (\n            <ul className=\"menu\">\n                <li className=\"menu--element\"><NavLink exact to=\"/\" className=\"NavLink\" activeClassName=\"Active\">start</NavLink></li>\n                <li className=\"menu--element\"><NavLink to=\"/about-app\" className=\"NavLink\" activeClassName=\"Active\">o aplikacji</NavLink></li>\n            </ul>\n        )\n    }\n}\n\nexport default Menu","import React, {Component} from 'react';\n\nclass UserStatus extends Component {\n    render() {\n        return (\n            <div className=\"userStatus\">\n                <p>user status</p>\n            </div>\n        )\n    }\n}\n\nexport default UserStatus","import React, {Component} from 'react';\nimport Menu from \"./Menu\";\nimport UserStatus from \"./UserStatus\";\n\nclass Navigation extends Component {\n    render() {\n        return (\n            <nav>\n                <Menu/>\n                <UserStatus/>\n            </nav>\n        )\n    }\n}\n\nexport default Navigation","import React, {Component} from 'react';\nimport Logo from \"./Logo\";\nimport Navigation from \"./Navigation\"\n\nclass Header extends Component {\n    render() {\n        return (\n            <header>\n                <Logo/>\n                <Navigation/>\n            </header>\n        )\n    }\n}\n\nexport default Header","import React, {Component} from 'react';\n\nclass StartPage extends Component {\n    render() {\n        return (\n            <p>To jest strona startowa</p>\n        )\n    }\n}\n\nexport default StartPage","import React, {Component} from 'react';\n\nclass AboutApp extends Component {\n    render() {\n        return (\n            <p>To jest strona o aplikacji</p>\n        )\n    }\n}\n\nexport default AboutApp","import React, {Component} from 'react';\nimport {HashRouter, Route, Switch} from 'react-router-dom';\nimport Header from \"./header/Header\"\nimport StartPage from \"./main_section/StartPage\";\nimport AboutApp from \"./main_section/AboutApp\";\n\nclass MainTemplate extends Component {\n    render() {\n        return (\n            <HashRouter>\n                <Header />\n                <Switch>\n                    <Route exact path=\"/\" component={StartPage}/>\n                    <Route path=\"/about-app\" component={AboutApp}/>\n                </Switch>\n            </HashRouter>\n        )\n    }\n}\n\nexport default MainTemplate","import React from 'react';\nimport MainTemplate from \"../Layouts/MainTemplate\";\n\nfunction App() {\n  return (\n      <>\n        <MainTemplate />\n      </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './Styles/main.scss';\nimport App from './Components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}